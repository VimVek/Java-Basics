An object is a real-time entry, and objects have relationships between them both in programming or real life.
Objects are related to each other using more than one relationship, such as Aggregation, Composition, Association, etc.

Association

>Association is a relation between two separate classes which establishes through their Objects.
>Association can be one-to-one, one-to-many, many-to-one, many-to-many.
>Association is not a has-a relationship and the weakest relationship among all.
>In Object-Oriented programming, an Object communicates to another object to use functionality and services provided by that object.
>In an Association relationship, none of the objects are parts or members of another.
>Composition and Aggregation are the two forms of association.
>A simple example of Association is a mother and her child.

Aggregation

>Aggregation relationship is "has-a" relationship.
>The only difference between Aggregation and Composition is that in Aggregation, objects are not tightly coupled
    or don't involve owning. All the objects are independent of each other and can exist even if the parent object gets deleted.
>Let's understand this by using the following example:
    A car comes with a wheel, and if we take off its wheels, the wheels will still exist.
    But a car without wheels won't be as useful as a car with its wheels, and that's how this relationship existed
    in the first place for assembling the parts to a bigger construct, which is capable of more things than its parts.

Composition

>Composition is a "belong-to" type of relationship in which one object is logically related with other objects.
>It is also referred to as "has-a" relationship.
>We can understand has-a or belong-to by using the following example:
    A classroom belongs to a school, or we can say a school has a classroom.
    So, calling both of them is only a matter of point of view.
>Composition is a strong type of "has-a" relationship because the containing object is its owner.
    So, objects are tightly coupled, which means if we delete the parent object, the child object will also get deleted with it.

